name: 'Poetry Publisher'
description: ''

inputs:

  app_version:
    description: 'Specific application version to set for the package'
    required: false
    default: ''

  poetry_version_options:
    description: 'Options for patching version (e.g., "patch", "minor")'
    required: false
    default: 'patch'
  poetry_build_params:
    description: 'Additional parameters for poetry build'
    required: false
    default: ''

  pytest_run:
    description: 'Run tests with pytest'
    required: false
    default: 'false'
  pytest_params:
    description: 'Parameters for pytest'
    required: false
    default: ''

runs:
  using: composite
  steps:

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        python -m pip install --user pipx
        pipx install poetry

    - name: Remove dist
      shell: bash
      run: rm -rf dist/

    - name: Check token length
      shell: bash
      run: |
        echo "Token length: ${#PYPI_TOKEN}"
        if [ ${#PYPI_TOKEN} -lt 10 ]; then
          echo "Token length is less than 10 characters."
          exit 1
        fi
      env:
        PYPI_TOKEN: ${{ env.PYPI_TOKEN }}]

    - name: Debug environment variables
      shell: bash
      run: env | grep PYPI

    - name: Bumping version
      shell: bash
      if: inputs.poetry_version_options != '' && inputs.app_version == ''
      run: poetry version ${{ inputs.poetry_version_options }}

    - name: Set specific version
      shell: bash
      if: inputs.app_version != ''
      run: poetry version ${{ inputs.app_version }}

    - name: Build package
      shell: bash
      run: poetry build ${{ inputs.poetry_build_params }}

    - name: Validate build
      shell: bash
      run: |
        ls -l dist/
        echo "Build validation complete."

    - name: Run tests
      shell: bash
      if: ${{ inputs.pytest_run == 'true' }}
      run: |
        poetry install
        poetry run pytest ${{ inputs.pytest_params }}

    # - name: Publish to PyPi
    #   shell: bash
    #   run: |
    #     poetry config pypi-token.pypi $PYPI_TOKEN
    #     poetry config repositories.test https://test.pypi.org/legacy/
    #     poetry publish --no-interaction -u __token__ -p $PYPI_TOKEN -r test
    #   env:
    #     PYPI_TOKEN: ${{ env.PYPI_TOKEN }}