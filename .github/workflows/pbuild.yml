name: Python build

on:
  workflow_dispatch: 
    inputs:
      version:
        required: false
        type: string

      python-version:
        required: false
        type: string
        default: '3.11'
      poetry_build_params:
        required: false
        type: string

      poetry_version_options:
        required: false
        type: string
        default: 'patch'

      pytest_run:
        required: true
        type: boolean
      pytest_params:
        required: false
        type: string

    # secrets:
    #   PYPI_API_TOKEN:
    #     required: true        
          

jobs:
  init:
    runs-on: ubuntu-latest
    steps:
      - name: Debug variables    
        run: |
            echo version = ${{ inputs.version }}
            echo python-version = ${{ inputs.python-version }}
            echo poetry_build_params = ${{ inputs.poetry_build_params }}
            echo run-rests = ${{ inputs.pytest_run }} 
            echo pytest_params = ${{ inputs.pytest_params }} 
            
            echo Environment:
                env

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --user pipx
          pipx install poetry==1.8.3

      - name: Remove dist
        run: |
           rm -rf dist/    
 
      - name: Build package
        run: |
          poetry build ${{ inputs.poetry_build_params }}

      - name: Validate build
        run: |
          ls -l dist/
          echo "Build validation complete."              

      - name: Run tests
        if: ${{ inputs.pytest_run == true }}
        run: |
          poetry install
          poetry run pytest ${{ inputs.pytest_params }}

      - name: AutoPatch version
        if: ${{ inputs.poetry_version_options != '' && inputs.version == '' }}
        run: poetry version ${{ inputs.poetry_version_options }}
    
      - name: Set specific version
        if: ${{ inputs.version != '' }}
        run: poetry version ${{ inputs.version }}          
          

      - name: Upload artifacts to GitHub
        uses: actions/upload-artifact@v3
        with:
          name: app-build
          path: dist/*

      - name: Publish to PyPi
        run: |
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry publish --no-interaction
        env:
            PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
          